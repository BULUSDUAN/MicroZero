@using System.Linq
@using Agebull.MicroZero
@using Newtonsoft.Json
@using MicroZero.Http.Route
@model StationConfig

@functions {

    private string GetIcon(ZeroStationType type)
    {
        switch (type)
        {
            case ZeroStationType.Api:
            case ZeroStationType.RouteApi:
            {
                return "el-icon-star-on";
            }
            case ZeroStationType.Vote:
            {
                return "el-icon-star-off";
            }
            case ZeroStationType.Notify:
            case ZeroStationType.Queue:
            {
                return "el-icon-share";
            }
            case ZeroStationType.Plan:
            {
                return "el-icon-time";
            }
            default:
            {
                return "el-icon-setting";
            }
        }
    }

}

@{
    var item = StationCounter.StationCountItems.ContainsKey(Model.Name) ? StationCounter.StationCountItems[Model.Name] : new StationCountItem();
    var klines = StationCounter.KLines.ContainsKey(Model.Name) ? StationCounter.KLines[Model.Name] : new List<KLine>();
    if (klines.Count > 60)
    {
        klines = klines.Skip(klines.Count - 60).ToList();
    }
    var lines = Agebull.MicroZero.JsonHelper.SerializeObject(klines);
    var config = new StationInfo(ZeroApplication.Config[Model.Name]);
    var configJson = JsonConvert.SerializeObject(config, Formatting.Indented);

    var status = JsonConvert.SerializeObject(new StationCountItem(), Formatting.Indented);

    ViewData["Title"] = "Monitor";
    ViewData["page"] = "monitor";

    var stations = ZeroApplication.Config.GetConfigs().OrderBy(p => p.RequestPort).ToArray();

    long min = 0;
    long max = 0;
    if (!string.IsNullOrEmpty(Url.ActionContext.HttpContext.Request.QueryString.Value))
    {
        var m = Url.ActionContext.HttpContext.Request.Query["min"];
        if (string.IsNullOrEmpty(m) || !long.TryParse(m, out min))
        {
            min = 0;
        }
        var x = Url.ActionContext.HttpContext.Request.Query["max"];
        if (string.IsNullOrEmpty(x) || !long.TryParse(x, out max))
        {
            max = 0;
        }
    }
    if (max == 0)
    {
        max = (long) (item.MaxQps * 1.5);
        if (item.AvgQps > 0 && max / item.AvgQps > 4)
        {
            max = item.AvgQps * 4;
        }
    }

    if (max < 1000)
    {
        max = 1000;
    }
}

@section Styles {
    <style>
        .chart_parent {
            display: inline-block;
            width: 24.5%;
            border: 0;
            padding: 0;
            margin: 0;
        }
        .chart_parent2 {
            display: inline-block;
            width: 49%;
            border: 0;
            padding: 0;
            margin: 0;
        }
        
        .chart_block {
            height: 220px;
            margin: 0;
            max-width: 100%;
            min-width: 100%;
        }

        .menu_boards {
            border-bottom: solid 1px whitesmoke;
            border-top: solid 1px whitesmoke;
            height: 100%;
            margin: 0;
            min-width: 200px;
            overflow: auto;
            padding: 0;
            text-align: left;
            width: auto;
        }

        .menu_panel {
            margin: 0;
            overflow: visible;
            padding: 0;
            text-align: left;
            width: auto;
        }
    </style>
}

@section InitScript{
    <script>
        var config = @Html.Raw(configJson);
        config.status = @Html.Raw(status);

        extend_data({
            config: config,
            activePanel: "real"
        });

        extend_methods({
            menu_select: function(index, indexPath) {
                location.href = `/Monitor/Index/${index}?min=@min&max=@max`;
            }
        });
    </script>
}

@section Charts{
    <script>
        var ws_status = new ws({
            address: `ws://${location.host}/status`,
            sub: "@Model.Name",
            onmessage: on_status
        });
        ws_status.open();
        var ws_kline = new ws({
            address: `ws://${location.host}/kline`,
            sub: "@Model.Name",
            onmessage: on_kline
        });
        ws_kline.open();
        var chart_q_late = Highcharts.chart('q_late',
            gauge_chart_option(@max,
                {
                    title: {
                        text: 'Last QPS'
                    },
                    series: [
                        {
                            name: 'Speed',
                            data: [@item.LastQps],
                            tooltip: {
                                valueSuffix: '/s'
                            }
                        }
                    ]
                }));
        var chart_q_avg = Highcharts.chart('q_avg',
            gauge_chart_option(@max,
                {
                    title: {
                        text: 'Avg QPS'
                    },
                    series: [
                        {
                            name: 'Speed',
                            data: [@item.AvgQps],
                            tooltip: {
                                valueSuffix: '/s'
                            }
                        }
                    ]
                }));

        var chart_q_max = Highcharts.chart('q_max',
            gauge_chart_option(@max,
                {
                    title: {
                        text: 'Max QPS'
                    },
                    series: [
                        {
                            name: 'Speed',
                            data: [@item.MaxQps],
                            tooltip: {
                                valueSuffix: '/s'
                            }
                        }
                    ]
                }));
        @if (config.Type == "Api")
        {
            <text>

                var chart_t_late = Highcharts.chart('t_late',
                    gauge_chart_option(@(max / 2),
                        {
                            title: {
                                text: 'Last TPS'
                            },
                            series: [
                                {
                                    name: 'Speed',
                                    data: [@item.LastTps],
                                    tooltip: {
                                        valueSuffix: '/s'
                                    }
                                }
                            ]
                        }));

                var chart_t_max = Highcharts.chart('t_max',
                    gauge_chart_option(@(max / 2),
                        {
                            title: {
                                text: 'Max TPS'
                            },
                            series: [
                                {
                                    name: 'Speed',
                                    data: [@item.MaxTps],
                                    tooltip: {
                                        valueSuffix: '/s'
                                    }
                                }
                            ]
                        }));
                var chart_t_avg = Highcharts.chart('t_avg',
                    gauge_chart_option(@(max / 2),
                        {
                            title: {
                                text: 'Avg TPS'
                            },
                            series: [
                                {
                                    name: 'Speed',
                                    data: [@item.AvgTps],
                                    tooltip: {
                                        valueSuffix: '/s'
                                    }
                                }
                            ]
                        }));
                var chart_t_hungry = Highcharts.chart('t_hungry',
                    gauge_chart_option(@(max / 2),
                        {
                            title: {
                                text: 'TPS hungry'
                            },
                            series: [
                                {
                                    name: 'Speed',
                                    data: [@(config.Type == "Api" ? item.TpsHungry : 0)]
                                }
                            ]
                        }));
                // 转速仪表
                var chart_q_hungry = Highcharts.chart('q_hungry',
                    gauge_chart_option(@max,
                        {
                            title: {
                                text: 'QPS hungry'
                            },
                            series: [
                                {
                                    name: 'Speed',
                                    data: [@(config.Type == "Api" ? item.QpsHungry : 0)]
                                }
                            ]
                        }));
                var chart_t_container = Highcharts.chart('t_container',
                    line_chart_option({
                        title: {
                            text: 'TPS'
                        },
                        @if (min >= 0)
                        {
                            <text>
                                yAxis: {
                                    min: 0
                                },
                            </text>
                        }
                        series: [
                            {
                                name: 'TPS',
                                data: (function() {
                                    // 生成随机值
                                    const data = [];
                                    const time = (new Date()).getTime();
                                    for (let i = -36; i <= 0; i += 1) {
                                        data.push({
                                            x: time + i * 1000,
                                            y: @item.LastTps
                                        });
                                    }
                                    return data;
                                }())
                            }
                        ]
                    }));
            </text>
        }


        var chart_q_container = Highcharts.chart('q_container',
            line_chart_option({
                title: {
                    text: 'QPS'
                },
                @if (min >= 0)
                {
                    <text>
                        yAxis: {
                            min: 0
                        },
                    </text>
                }
                series: [
                    {
                        name: 'TPS',
                        data: (function() {
                            // 生成随机值
                            const data = [];
                            const time = (new Date()).getTime();
                            for (let i = -36; i <= 0; i += 1) {
                                data.push({
                                    x: time + i * 1000,
                                    y: @item.LastQps
                                });
                            }
                            return data;
                        }())
                    }
                ]
            }));

        var pre = 0;
        var count = 0;
        var pre_avg = 0;

        function check_k_avg(item) {
            if (item == null)
                return {};
            count++;
            //item.x = new Date(item.x);
            item.color = pre > item.q3 ? "blue" : "red";
            item.fillColor = pre > item.q3 ? "white" : "red";
            pre = item.q3;
            const avg = {
                x: item.x,
                y: item.Avg,
                marker: { fillColor: pre_avg < item.Avg ? "red" : "blue" }
            };
            pre_avg = item.Avg;
            return avg;
        }

        
        var klines = @Html.Raw(lines);
        var kavgs = [];
        var idx = 0;
        for (; idx < klines.length; idx++) {
            klines[idx].x = Number(klines[idx].x);
            kavgs.push(check_k_avg(klines[idx]));
        }
        var chart = Highcharts.chart('container',
            {
                credits: {
                    enabled: false
                },
                title: {
                    text: '请求量分钟K线'
                },
                legend: {
                    enabled: false
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                @if (min >= 0)
                {
                    <text>
                        yAxis: {
                            min: 0
                        },
                    </text>
                }
                plotOptions: {
                    spline: {
                        lineWidth: 1,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            enabled: false
                        }
                    }
                },
                series: [
                    {
                        name: 'K线',
                        type: 'boxplot', //boxplot
                        color: "blue",
                        data: klines,
                        tooltip: {
                            pointFormat:
                                '<span style="color:{point.color}">\u25CF</span> <b> {series.name}</b><br/>' + // eslint-disable-line no-dupe-keys
                                    '最大: {point.high}<br/>' +
                                    '开始\t: {point.q3}<br/>' +
                                    '结束\t: {point.q1}<br/>' +
                                    '最小: {point.low}<br/>'
                        }
                    }, {
                        name: '均线',
                        type: 'spline',
                        lineColor: "green",
                        data: kavgs,
                        tooltip: {
                            pointFormat: '平均值 : {point.y}'
                        }
                    }
                ]
            });

        function on_status(item) {
            Vue.set(vue_option.data.config, "status", item);
            update_chart(chart_q_late, item.LastQps);
            update_chart(chart_q_avg, item.AvgQps);
            update_chart(chart_q_max, item.MaxQps);
            const time = (new Date()).getTime();
            chart_q_container.series[0].addPoint({ x: time, y: Number(item.LastQps) }, true, true);
            @if (config.Type == "Api")
            {
                <text>
                    update_chart(chart_t_late, item.LastTps);
                    update_chart(chart_t_avg, item.AvgTps);
                    update_chart(chart_t_max, item.MaxTps);
                    update_chart(chart_q_hungry, item.qps_hungry);
                    update_chart(chart_t_hungry, item.tps_hungry);
                    chart_t_container.series[0].addPoint({ x: time, y: Number(item.LastTps) }, true, true);
                </text>
            }
        }

        function on_kline(item) {
            chart.series[0].addPoint(item, true, count > 100);
            chart.series[1].addPoint(check_k_avg(item), true, count > 100);
        }
    </script>
}

@section Menus{
    <el-menu :collapse="isCollapse"
             default-active="@Model.Name"
             @@select="menu_select"
             background-color="#545c64"
             text-color="#fff" unique-opened
             active-text-color="#ffd04b">

        @foreach (var groups in stations.GroupBy(p => p.StationType))
        {
            <el-submenu index="@groups.Key">
                <template slot="title">
                    <i class="@(GetIcon(groups.Key))"></i>
                    <span>@groups.Key</span>
                </template>
                @foreach (var station in groups)
                {
                    <el-menu-item index="@station.Name">
                        <template slot="title">
                            <i class="@(GetIcon(groups.Key))"></i>
                            <span>@station.Name</span>
                        </template>
                    </el-menu-item>
                }
            </el-submenu>
        }
    </el-menu>
}

<el-container style="height: 100%; margin: 0; overflow: hidden; padding: 0; width: 100%;">
    <el-main style="height: 100%; margin: 0; overflow: auto; padding: 0; width: 100%;">
        <div style="margin: 0; overflow: visible; padding: 0; width: 100%;">
            <div style="display: inline-block; width: 100%">
                <div id="container" style="height: 300px; min-width: 280px;"></div>
            </div>
            <div>
                <div class="chart_parent">
                    <div id="q_late" class="chart_block"></div>
                </div>
                <div class="chart_parent">
                    <div id="q_avg" class="chart_block"></div>
                </div>
                <div class="chart_parent2">
                    <div id="q_container" class="chart_block"></div>
                </div>
            </div>
            <div v-if="config.type == 'Api'">
                <div class="chart_parent">
                    <div id="t_late" class="chart_block"></div>
                </div>
                <div class="chart_parent">
                    <div id="t_avg" class="chart_block"></div>
                </div>
                <div class="chart_parent2">
                    <div id="t_container" class="chart_block"></div>
                </div>
            </div>
            <div>
                <div class="chart_parent">
                    <div id="q_max" class="chart_block"></div>
                </div>
                <div class="chart_parent" v-if="config.type == 'Api'">
                    <div id="t_max" class="chart_block"></div>
                </div>
                <div class="chart_parent">
                    <div id="q_hungry" class="chart_block"></div>
                </div>
                <div class="chart_parent" v-if="config.type == 'Api'">
                    <div id="t_hungry" class="chart_block"></div>
                </div>
            </div>
        </div>
    </el-main>

    <el-aside class="message_boards" style="border: solid 1px whitesmoke; height: 100%; line-height: 30px; padding: 10px; text-align: left; width: 300px;">
        <div style="height: 100%; overflow: hidden; width: 100%;">
            <div style="height: 100%; margin: 0 20px 0 20px; overflow: hidden; width: 260px;">
                <el-tabs v-model="activePanel" class="tiled">
                    <el-tab-pane label="实时信息" name="real">

                        <div>
                            <h3>
                                Client
                            </h3>
                            <div><span class="my_label">Request</span> : {{config.status.request_in | thousandsNumber}}</div>
                            <div><span class="my_label">Result</span> : {{config.status.request_out | thousandsNumber}}</div>
                            <div><span class="my_label">Error</span> : {{config.status.request_err | thousandsNumber}}</div>
                            <div><span class="my_label">Total</span> : {{config.status.TotalQps | thousandsNumber}}</div>
                            <div><span class="my_label">Avg</span> : {{config.status.AvgQps | thousandsNumber}}/s</div>
                            <div><span class="my_label">Max</span> : {{config.status.MaxQps | thousandsNumber}}/s</div>
                            <div><span class="my_label">Min</span> : {{config.status.MinQps | thousandsNumber}}/s</div>
                            <div><span class="my_label">Last</span> : {{config.status.LastQps | thousandsNumber}}/s</div>
                        </div>
                        <div>
                            <h3>
                                Worker
                            </h3>
                            <template v-if="config.type == 'Api'">
                                <div><span class="my_label">Issued</span> : {{config.status.worker_out | thousandsNumber}}</div>
                                <div><span class="my_label">Result</span> : {{config.status.worker_in | thousandsNumber}}</div>
                                <div><span class="my_label">Error</span> : {{config.status.worker_err | thousandsNumber}}</div>
                                <div><span class="my_label">Total</span> : {{config.status.TotalTps | thousandsNumber}}</div>
                                <div><span class="my_label">Avg</span> : {{config.status.AvgTps | thousandsNumber}}/s</div>
                                <div><span class="my_label">Max</span> : {{config.status.MaxTps | thousandsNumber}}/s</div>
                                <div><span class="my_label">Min</span> : {{config.status.MinTps | thousandsNumber}}/s</div>
                                <div><span class="my_label">Last</span> : {{config.status.LastTps | thousandsNumber}}/s</div>
                            </template>
                            <template v-else>
                                <div><span class="my_label">Publish</span> : {{config.status.worker_out}}</div>
                            </template>
                        </div>
                    </el-tab-pane>
                    <el-tab-pane label="工作站点" name="workers">
                        <template v-for="worker in config.status.workers">
                            <el-rate v-model="worker.level"
                                     disabled
                                     text-color="#ff9900"
                                     score-template="{value}">
                            </el-rate>
                            {{worker.real_name}} ({{worker.state_text}})
                        </template>
                    </el-tab-pane>
                </el-tabs>
            </div>
        </div>
    </el-aside>
</el-container>